// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRoom holds the string denoting the room field in the database.
	FieldRoom = "room"
	// FieldHostel holds the string denoting the hostel field in the database.
	FieldHostel = "hostel"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// EdgePasses holds the string denoting the passes edge name in mutations.
	EdgePasses = "passes"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PassesTable is the table that holds the passes relation/edge.
	PassesTable = "passes"
	// PassesInverseTable is the table name for the Pass entity.
	// It exists in this package in order to avoid circular dependency with the "pass" package.
	PassesInverseTable = "passes"
	// PassesColumn is the table column denoting the passes relation/edge.
	PassesColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldRoom,
	FieldHostel,
	FieldPhone,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRoom orders the results by the room field.
func ByRoom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoom, opts...).ToFunc()
}

// ByHostel orders the results by the hostel field.
func ByHostel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostel, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPassesCount orders the results by passes count.
func ByPassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPassesStep(), opts...)
	}
}

// ByPasses orders the results by passes terms.
func ByPasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PassesTable, PassesColumn),
	)
}
