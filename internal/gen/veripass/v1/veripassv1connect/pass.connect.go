// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: veripass/v1/pass.proto

package veripassv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chetan0402/veripass/internal/gen/veripass/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PassServiceName is the fully-qualified name of the PassService service.
	PassServiceName = "veripass.v1.PassService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PassServiceGetPassProcedure is the fully-qualified name of the PassService's GetPass RPC.
	PassServiceGetPassProcedure = "/veripass.v1.PassService/GetPass"
	// PassServiceGetLatestPassByUserProcedure is the fully-qualified name of the PassService's
	// GetLatestPassByUser RPC.
	PassServiceGetLatestPassByUserProcedure = "/veripass.v1.PassService/GetLatestPassByUser"
	// PassServiceListPassesByUserProcedure is the fully-qualified name of the PassService's
	// ListPassesByUser RPC.
	PassServiceListPassesByUserProcedure = "/veripass.v1.PassService/ListPassesByUser"
)

// PassServiceClient is a client for the veripass.v1.PassService service.
type PassServiceClient interface {
	GetPass(context.Context, *connect.Request[v1.GetPassRequest]) (*connect.Response[v1.Pass], error)
	GetLatestPassByUser(context.Context, *connect.Request[v1.GetLatestPassByUserRequest]) (*connect.Response[v1.Pass], error)
	ListPassesByUser(context.Context, *connect.Request[v1.ListPassesByUserRequest]) (*connect.Response[v1.ListPassesByUserResponse], error)
}

// NewPassServiceClient constructs a client for the veripass.v1.PassService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPassServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PassServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	passServiceMethods := v1.File_veripass_v1_pass_proto.Services().ByName("PassService").Methods()
	return &passServiceClient{
		getPass: connect.NewClient[v1.GetPassRequest, v1.Pass](
			httpClient,
			baseURL+PassServiceGetPassProcedure,
			connect.WithSchema(passServiceMethods.ByName("GetPass")),
			connect.WithClientOptions(opts...),
		),
		getLatestPassByUser: connect.NewClient[v1.GetLatestPassByUserRequest, v1.Pass](
			httpClient,
			baseURL+PassServiceGetLatestPassByUserProcedure,
			connect.WithSchema(passServiceMethods.ByName("GetLatestPassByUser")),
			connect.WithClientOptions(opts...),
		),
		listPassesByUser: connect.NewClient[v1.ListPassesByUserRequest, v1.ListPassesByUserResponse](
			httpClient,
			baseURL+PassServiceListPassesByUserProcedure,
			connect.WithSchema(passServiceMethods.ByName("ListPassesByUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// passServiceClient implements PassServiceClient.
type passServiceClient struct {
	getPass             *connect.Client[v1.GetPassRequest, v1.Pass]
	getLatestPassByUser *connect.Client[v1.GetLatestPassByUserRequest, v1.Pass]
	listPassesByUser    *connect.Client[v1.ListPassesByUserRequest, v1.ListPassesByUserResponse]
}

// GetPass calls veripass.v1.PassService.GetPass.
func (c *passServiceClient) GetPass(ctx context.Context, req *connect.Request[v1.GetPassRequest]) (*connect.Response[v1.Pass], error) {
	return c.getPass.CallUnary(ctx, req)
}

// GetLatestPassByUser calls veripass.v1.PassService.GetLatestPassByUser.
func (c *passServiceClient) GetLatestPassByUser(ctx context.Context, req *connect.Request[v1.GetLatestPassByUserRequest]) (*connect.Response[v1.Pass], error) {
	return c.getLatestPassByUser.CallUnary(ctx, req)
}

// ListPassesByUser calls veripass.v1.PassService.ListPassesByUser.
func (c *passServiceClient) ListPassesByUser(ctx context.Context, req *connect.Request[v1.ListPassesByUserRequest]) (*connect.Response[v1.ListPassesByUserResponse], error) {
	return c.listPassesByUser.CallUnary(ctx, req)
}

// PassServiceHandler is an implementation of the veripass.v1.PassService service.
type PassServiceHandler interface {
	GetPass(context.Context, *connect.Request[v1.GetPassRequest]) (*connect.Response[v1.Pass], error)
	GetLatestPassByUser(context.Context, *connect.Request[v1.GetLatestPassByUserRequest]) (*connect.Response[v1.Pass], error)
	ListPassesByUser(context.Context, *connect.Request[v1.ListPassesByUserRequest]) (*connect.Response[v1.ListPassesByUserResponse], error)
}

// NewPassServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPassServiceHandler(svc PassServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	passServiceMethods := v1.File_veripass_v1_pass_proto.Services().ByName("PassService").Methods()
	passServiceGetPassHandler := connect.NewUnaryHandler(
		PassServiceGetPassProcedure,
		svc.GetPass,
		connect.WithSchema(passServiceMethods.ByName("GetPass")),
		connect.WithHandlerOptions(opts...),
	)
	passServiceGetLatestPassByUserHandler := connect.NewUnaryHandler(
		PassServiceGetLatestPassByUserProcedure,
		svc.GetLatestPassByUser,
		connect.WithSchema(passServiceMethods.ByName("GetLatestPassByUser")),
		connect.WithHandlerOptions(opts...),
	)
	passServiceListPassesByUserHandler := connect.NewUnaryHandler(
		PassServiceListPassesByUserProcedure,
		svc.ListPassesByUser,
		connect.WithSchema(passServiceMethods.ByName("ListPassesByUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/veripass.v1.PassService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PassServiceGetPassProcedure:
			passServiceGetPassHandler.ServeHTTP(w, r)
		case PassServiceGetLatestPassByUserProcedure:
			passServiceGetLatestPassByUserHandler.ServeHTTP(w, r)
		case PassServiceListPassesByUserProcedure:
			passServiceListPassesByUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPassServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPassServiceHandler struct{}

func (UnimplementedPassServiceHandler) GetPass(context.Context, *connect.Request[v1.GetPassRequest]) (*connect.Response[v1.Pass], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("veripass.v1.PassService.GetPass is not implemented"))
}

func (UnimplementedPassServiceHandler) GetLatestPassByUser(context.Context, *connect.Request[v1.GetLatestPassByUserRequest]) (*connect.Response[v1.Pass], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("veripass.v1.PassService.GetLatestPassByUser is not implemented"))
}

func (UnimplementedPassServiceHandler) ListPassesByUser(context.Context, *connect.Request[v1.ListPassesByUserRequest]) (*connect.Response[v1.ListPassesByUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("veripass.v1.PassService.ListPassesByUser is not implemented"))
}
